generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id          String       @id @default(uuid())
  userId      String
  title       String       @db.LongText
  description String?      @db.LongText
  imageUrl    String?      @db.LongText
  isPublished Boolean      @default(false)
  firstExam   Boolean?     @default(false)
  categoryId  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  category    Category?    @relation(fields: [categoryId], references: [id])
  chapters    Chapter[]
  attachments Attachment[]
  exams       Exam[]

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String   @db.LongText
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model TaskAttachment {
  id        String   @id @default(uuid())
  name      String?
  url       String   @db.LongText
  taskId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  @@index([taskId])
}

model Chapter {
  id          String   @id @default(uuid())
  title       String
  description String?  @db.LongText
  isPublished Boolean  @default(false)
  position    Int
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  quiz        Quiz?

  @@index([courseId])
}

model Task {
  id          String   @id @default(uuid())
  title       String
  content     String?  @db.LongText
  isPublished Boolean  @default(false)
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([courseId])
}

model UserProgress {
  id          String   @id @default(uuid())
  userId      String
  lessonId    String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  percentage  Float?   @default(0)
  startedAt   Float?
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([lessonId])
}

model UserQuizPoints {
  id        String   @id @default(uuid())
  userId    String
  quizId    String
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@unique([userId, quizId])
  @@index([quizId])
}

model Lesson {
  id           String         @id @default(uuid())
  title        String
  description  String?        @db.LongText
  videoUrl     String?        @db.LongText
  position     Int
  isPublished  Boolean        @default(false)
  chapterId    String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  chapter      Chapter        @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]

  @@index([chapterId])
}

model Quiz {
  id             String           @id @default(uuid())
  title          String
  description    String?          @db.LongText
  isPublished    Boolean          @default(false)
  userId         String?          @default("nil")
  chapterId      String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  chapter        Chapter          @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  userQuizPoints UserQuizPoints[]
  questions      QuizQuestion[]

  @@index([chapterId])
}

model Exam {
  id           String         @id @default(uuid())
  courseId     String?
  title        String
  description  String?
  passingScore Int?           @default(70)
  beforeScore  Float?         @default(0)
  afterScore   Float?         @default(0)
  isPublished  Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  starterExam  Boolean        @default(false)
  userId       String?        @default("nil")
  course       Course?        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions    ExamQuestion[]
  certificate  Certificate[]
  examUrl      String?        @db.LongText

  @@index([courseId])
}

model ExamQuestion {
  id          String               @id @default(uuid())
  examId      String
  prompt      String
  position    Int
  answer      String               @default("1")
  isPublished Boolean              @default(false)
  explanation String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  exam        Exam                 @relation(fields: [examId], references: [id], onDelete: Cascade)
  options     ExamQuestionOption[]

  @@index([examId])
}

model QuizQuestion {
  id          String               @id @default(uuid())
  quizId      String
  prompt      String
  isPublished Boolean              @default(false)
  position    Int
  answer      String               @default("1")
  explanation String?              @db.Text
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  quiz        Quiz                 @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options     QuizQuestionOption[]

  @@index([quizId])
}

model ExamOptions {
  id        String   @id @default(uuid())
  options   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  examId    String
  userId    String
}

model ExamQuestionOption {
  id         String       @id @default(uuid())
  questionId String
  text       String
  position   Int          @default(autoincrement())
  question   ExamQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@index([position])
}

model QuizQuestionOption {
  id         String       @id @default(uuid())
  questionId String
  text       String
  position   Int          @default(autoincrement())
  question   QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@index([position])
}

model Certificate {
  id             String   @id @default(uuid())
  examId         String
  nameOfStudent  String?
  userId         String?
  courseTitle    String
  dateOfIssuance DateTime @default(now())
  createdAt      DateTime @default(now())
  exam           Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)

  @@index([examId])
}

model Message {
  id           String   @id @default(uuid())
  userId       String?  @default("nil")
  context      String   @db.LongText
  messageId    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  repliesCount Float?
  reply        Reply[]
}

model GoalsText {
  id        String   @id @default(uuid())
  context   String?  @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PoliciesText {
  id        String   @id @default(uuid())
  context   String?  @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LibraryText {
  id        String   @id @default(uuid())
  context   String?  @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserStats {
  id               String   @id
  lessonsCompleted Float?   @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  examsCompleted   Float?   @default(0)
  quizsCompleted   Float?   @default(0)
}

model Reply {
  id        String   @id @default(uuid())
  userId    String?  @default("nil")
  context   String   @db.LongText
  replyId   String?
  messageId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
}

model AssistPages {
  id               String   @id @default(uuid())
  userId           String?  @default("nil")
  introductionPage Boolean?
  goalsPage        Boolean?
  contactPage      Boolean?
  coursesPage      Boolean?
  messagesPage     Boolean?
  leaderboardPage  Boolean?
  libraryPage      Boolean?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Result {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  examId    String
  points    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([courseId])
  @@index([examId])
}

model DialogBoxCheck {
  id        String              @id
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  page      DialogBoxCheck_page
  checked   Boolean             @default(false)
  userId    String

  @@unique([userId, page])
  @@index([userId])
}

enum DialogBoxCheck_page {
  introductionPage
  goalsPage
  contactPage
  coursesPage
  messagesPage
  leaderboardPage
  libraryPage
}
